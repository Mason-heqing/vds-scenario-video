#include "sass.hpp"
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>

#include "ast.hpp"
#include "json.hpp"
#include "context.hpp"
#include "position.hpp"
#include "source_map.hpp"

namespace Sass {
  SourceMap::SourceMap() : current_position(0, 0, 0), file("stdin") { }
  SourceMap::SourceMap(const std::string& file) : current_position(0, 0, 0), file(file) { }

  std::string SourceMap::render_srcmap(Context &ctx) {

    const bool include_sources = ctx.c_options.source_map_contents;
    const std::vector<std::string> links = ctx.srcmap_links;
    const std::vector<Resource>& sources(ctx.resources);

    JsonNode* json_srcmap = json_mkobject();

    json_append_member(json_srcmap, "version", json_mknumber(3));

    const char *file_name = file.c_str();
    JsonNode *json_file_name = json_mkstring(file_name);
    json_append_member(json_srcmap, "file", json_file_name);

    // pass-through sourceRoot option
    if (!ctx.source_map_root.empty()) {
      JsonNode* root = json_mkstring(ctx.source_map_root.c_str());
      json_append_member(json_srcmap, "sourceRoot", root);
    }

    JsonNode *json_sources = json_mkarray();
    for (size_t i = 0; i < source_index.size(); ++i) {
      std::string source(links[source_index[i]]);
      if (ctx.c_options.source_map_file_urls) {
        source = File::rel2abs(source);
        // check for windows abs path
        if (source[0] == '/') {
          // ends up with three slashes
          source = "file://" + source;
        } else {
          // needs an additional slash
          source = "file:///" + source;
        }
      }
      const char* source_name = source.c_str();
      JsonNode *json_source_name = json_mkstring(source_name);
      json_append_element(json_sources, json_source_name);
    }
    json_append_member(json_srcmap, "sources", json_sources);

    if (include_sources && source_index.size()) {
      JsonNode *json_contents = json_mkarray();
      for (size_t i = 0; i < source_index.size(); ++i) {
        const Resource& resource(sources[source_index[i]]);
        JsonNode *json_content = json_mkstring(resource.contents);
        json_append_element(json_contents, json_content);
      }
      json_append_member(json_srcmap, "sourcesContent", json_contents);
    }

    JsonNode *json_names = json_mkarray();
    // so far we have no implementation for names
    // no problem as we do not alter any identifiers
    json_append_member(json_srcmap, "names", json_names);

    std::string mappings = serialize_mappings();
    JsonNode *json_mappings = json_mkstring(mappings.c_str());
    json_append_member(json_srcmap, "mappings", json_mappings);

    char *str = json_stringify(json_srcmap, "\t");
    std::string result = std::s